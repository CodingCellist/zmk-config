/* vim: set ft=dts textwidth=0 nowrap :
 *
 * Based on the original layout by Darryl deHaan
 * Copyright (c) 2021 Darryl deHaan
 * SPDX-License-Identifier: MIT
 *
 * Modified by Thomas E. Hansen (CodingCellist)
 * Copyright (c) 2023 Thomas E. Hansen (CodingCellist)
 * SPDX-License-Identifier: MIT
 *
 */

#include <behaviors.dtsi>
#include "da.dtsi"
#include "i3wm.dtsi"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// LAYERS //

#define DEFAULT   0
#define HALF_MAG  1
#define LNUMBER   2
#define LNAVMED   3
#define MAGIC     4


// ZMK STUFF //

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};


/ {
        // NEXT and PREV are defined as tap-dances, with one (1) tap meaning
        // "next layer" and two (2) taps meaning "previous layer". This is
        // similar to how some music players do single-button operation.
        // N.B.: care must be taken to make sure the NEXT and PREV mappings go
        // to the right layers and that they wrap around at the top and bottom
        // layers respectively. Additionaly, one must be careful to reference
        // the right tap-dances in their respective layers.
        behaviors {

            /** FIXME: erasable?
            // NEXT and PREV for default layer
            td0: tap_dance_0 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_LAYER_0";
                    #binding-cells= <0>;
                    tapping-term-ms = <200>;
                    bindings = <&to LAYER_1>, <&to LAYER_2>;
                    //         ^ NEXT         ^ PREV
            };

            // NEXT and PREV for layer 1
            td1: tap_dance_1 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_LAYER_1";
                    #binding-cells= <0>;
                    tapping-term-ms = <200>;
                    bindings = <&to LAYER_2>, <&to DEFAULT>;
                    //         ^ NEXT         ^ PREV
            };

            // NEXT and PREV for layer 2
            td2: tap_dance_2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_LAYER_2";
                    #binding-cells= <0>;
                    tapping-term-ms = <200>;
                    bindings = <&to DEFAULT>, <&to 1>;
                    //         ^ NEXT         ^ PREV
            };

            // 1-tap for LSHIFT, 2-tap for LGUI (both can be modifiers)
            shft_gui: td_lshft_lgui {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_LSHFT_LGUI";
                    #binding-cells= <0>;
                    tapping-term-ms = <200>;
                    bindings = <&kp LSHFT>, <&kp LGUI>;
            };

            // 1-tap for the number '1', 2-tap for F1
            n1_f1: td_n1_f1 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N1_F1";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N1>, <&kp F1>;
            };

            // 1-tap for the number '2', 2-tap for F2
            n2_f2: td_n2_f2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N2_F2";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N2>, <&kp F2>;
            };

            // 1-tap for the number '3', 2-tap for F3
            n3_f3: td_n3_f3 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N3_F3";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N3>, <&kp F3>;
            };

            // 1-tap for the number '4', 2-tap for F4
            n4_f4: td_n4_f4 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N4_F4";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N4>, <&kp F4>;
            };

            // 1-tap for the number '5', 2-tap for F5
            n5_f5: td_n5_f5 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N5_F5";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N5>, <&kp F5>;
            };

            // 1-tap for the number '6', 2-tap for F6
            n6_f6: td_n6_f6 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N6_F6";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N6>, <&kp F6>;
            };

            // 1-tap for the number '7', 2-tap for F7
            n7_f7: td_n7_f7 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N7_F7";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N7>, <&kp F7>;
            };

            // 1-tap for the number '8', 2-tap for F8
            n8_f8: td_n8_f8 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N8_F8";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N8>, <&kp F8>;
            };

            // 1-tap for the number '9', 2-tap for F9
            n9_f9: td_n9_f9 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N9_F9";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N9>, <&kp F9>;
            };

            // 1-tap for the number '0', 2-tap for F10
            n0_f10: td_n0_f10 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_N0_F0";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp N0>, <&kp F10>;
            };
            */

            // tap-dance for Å and '+' (which is needed for '?')
            aa_plus: td_aa_plus {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_AA_PLUS";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp daAA>, <&kp daPLUS>;
            };

            // hold for L3, double-tap for switch _to_ L3
            l3_navmed: td_navmed {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_LNAVMED";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&mo LNAVMED>, <&to LNAVMED>;
            };

            // hold for L3, double-tap for switch _to_ L0/DEFAULT
            l3_esc_hatch: td_l3_default {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_LNAVMED";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&mo LNAVMED>, <&to DEFAULT>;
            };

            // i3wm: tap once for navigating left, twice to move the current
            //       container left
            i3_l_mov: td_i3_left_move {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_I3_L_MOV";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp LG(H)>, <&kp LS(LG(H))>;
            };

            // i3wm: tap once for navigating right, twice to move the current
            //       container right
            i3_r_mov: td_i3_right_move {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TD_I3_R_MOV";
                    #binding-cells= <0>;
                    tapping-term-ms = <150>;
                    bindings = <&kp LG(S)>, <&kp LS(LG(S))>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
                        bindings = <
// -----------------------------------------------------------------------------------------
// 0
// | '|' |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | Å/+ |
// | TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  Æ  |  Ø  |
// |  <  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  -  |  '  |
//  ^ LT        | LTL3 | LSHFT | LCTRL |   | ENTER | SPACE | BKSP |
//              | LTL3 |   ESC | _____ |   | RALT  | xxxxx | LTL2 |
   &kp daPIPE          &kp Q &kp W &kp E &kp R &kp T    &kp Y &kp U  &kp I     &kp O   &kp P       &aa_plus
   &kp TAB             &kp A &kp S &kp D &kp F &kp G    &kp H &kp J  &kp K     &kp L   &kp daAE    &kp daOE
   &lt HALF_MAG daLT   &kp Z &kp X &kp C &kp V &kp B    &kp N &kp M  &kp COMMA &kp DOT &kp daMINUS &kp daAPO
                &l3_navmed  &mt LSHFT ESC  &kp LCTRL    &mt RALT ENTER  &kp SPACE  &lt LNUMBER BSPC
                        >;
                };

                half_magic_layer {
                        label = "QWERTY";
                        bindings = <
// -----------------------------------------------------------------------------------------
// 1
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
// |  BT |     |     |     |     |     |   |     |     |     |     |     |     |
// | (H) |     |     |     |     |     |   |     |     |     |     |     |     |
//              |      |       |       |   |       |       |      |
//              |      |       |       |   |       |       |      |
   &trans    &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
   &to MAGIC &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
   &trans    &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };

                number_layer {
                        label = "NUMBER";
                        bindings = <
// -----------------------------------------------------------------------------------------
// 2
// |     | RA1 |  @  |  £  |  $  | RA5 |   | RA6 |  {  |  [  |  ]  |  }  |     |
// |     |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
//              | ____ | LSHFT | LCTRL |   | ENTER | SPACE | BKSP |
//              | ____ |   ESC | _____ |   | RALT  | xxxxx | LSL3 |
   &trans &kp RA(N1) &kp RA(N2) &kp RA(N3) &kp RA(N4) &kp RA(N5)    &kp RA(N6) &kp RA(N7) &kp RA(N8) &kp RA(N9) &kp RA(N0) &trans
   &trans &kp N1     &kp N2     &kp N3     &kp N4     &kp N5        &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &trans
   &trans &trans     &trans     &trans     &trans     &trans        &trans     &trans     &trans     &trans     &trans     &trans
                                          &trans  &trans  &trans    &trans  &trans  &trans
                        >;
                };
// TODO: put FN keys on here somehow?

                navmed_layer {
                        label = "NAVMED";
                        bindings = <
// -----------------------------------------------------------------------------------------
// 3
// |     |     |     |     |     | VO+ |   |     |     |     |     | LCK |     |
// | i3A |     |     |     |     | VO- |   |     |iL/mL|     |     |iR/mR|     |
// |     | PGU | PGD |  ↓  |  ↑  | VOM |   |     | HOM | END |     |     |     |
//              | (HL) | LSHFT | LCTRL |   | ENTER | SPACE | DEL  |
//              | LTL1 |   ESC | _____ |   | RALT  | xxxxx | ____ |
   &trans      &trans    &trans        &trans        &trans &kp C_VOL_UP    &trans &trans     &trans   &trans &trans    &trans
   &kp LGUI(A) &trans    &kp LC(PG_UP) &kp LC(PG_DN) &trans &kp C_VOL_DN    &trans &i3_l_mov  &trans   &trans &i3_r_mov &trans
   &trans      &kp PG_UP &kp PG_DN     &kp DOWN      &kp UP &kp C_MUTE      &trans &kp HOME   &kp END  &trans &trans    &trans
                                           &l3_esc_hatch  &trans  &trans    &trans  &trans  &trans
                        >;
                };

                magic_layer {
                        label = "MAGIC";
                        bindings = <
// -----------------------------------------------------------------------------------------
// 4 (MAGIC)
// |     | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |     |
// |     |     |     |     | BTL |     |   |     | BTL |     |     |     |     |
// |     |     |     |     |     |BTCLR|   |     |     |     |     |     |     |
//              | LTL1 | _____ | _____ |   | _____ | _____ | ____ |
//              | ____ | _____ | _____ |   | _____ | _____ | ____ |
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &none &none       &none  &none &none &none
   &none &none        &none        &none        &bootloader  &none           &none &bootloader &none  &none &none &none
   &none &none        &none        &none        &none        &bt BT_CLR      &none &none       &none  &none &none &none
                                               &to DEFAULT  &none  &none     &none  &none  &none
                        >;
                };

/**
 * // Separate shift layer? For selection?
 * // LSHFT
 * // -----------------------------------------------------------------------------------------
 * // |     |     |     |     |     |     |   |     |     |     |     |     |     |
 * // |     |     |     |     |     |     |   |     |     |     |     |     |     |
 * // |     |     |     |     |     |     |   |     |     |     |     |     |     |
 * //              | ____ | (HLD) | LCTRL |   | ENTER |  END  | BKSP |
 * //              | ____ |   ESC | _____ |   | _____ | _____ | RALT |
 * 
 * // GUI would also LS(GUI) and a layer with numbers?
 */

        };
};

